{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBar.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","flag","name","capital","className","src","alt","CardList","countries","map","country","i","key","SearchBar","searchWord","searchChange","type","placeholder","onChange","Scroll","props","style","height","border","overflowY","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchWord","event","searchword","target","value","fetch","then","response","json","all","filteredCountries","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"2MAceA,EAZF,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC1B,OACE,yBAAKC,UAAU,2DACb,yBAAKC,IAAKJ,EAAMK,IAAI,SACpB,6BACE,4BAAKJ,GACL,2BAAIC,MCYGI,EAjBE,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAClB,OACE,6BACGA,EAAUC,KAAI,SAACC,EAASC,GACvB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLV,KAAMO,EAAUG,GAAGV,KACnBC,KAAMM,EAAUG,GAAGT,KACnBC,QAASK,EAAUG,GAAGR,eCGnBU,EAbG,SAAC,GAAiC,EAA/BC,WAAgC,IAApBC,EAAmB,EAAnBA,aAC/B,OACE,yBAAKX,UAAU,OACb,2BACEA,UAAU,uBACVY,KAAK,SACLC,YAAY,mBACZC,SAAUH,MCOHI,EAdA,SAACC,GACd,OACE,yBACEC,MAAO,CACLC,OAAQ,QACRC,OAAQ,kBACRC,UAAW,WAGZJ,EAAMK,WCWEC,E,kDAnBb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACN,sDAEFG,KAAKX,MAAMK,a,GAhBMQ,aC2CbC,E,kDAtCb,aAAe,IAAD,8BACZ,gBAaFC,aAAe,SAACC,GACd,EAAKJ,SAAS,CAAEK,WAAYD,EAAME,OAAOC,SAbzC,EAAKZ,MAAQ,CACXnB,UAAW,GACX6B,WAAY,IAJF,E,gEAQO,IAAD,OAClBG,MAAM,wCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAS,EAAKZ,SAAS,CAAExB,UAAWoC,S,+BAMpC,IAAD,EAC2Bb,KAAKJ,MAA/BnB,EADD,EACCA,UAAW6B,EADZ,EACYA,WACbQ,EAAoBrC,EAAUsC,QAAO,SAACtC,GAC1C,OAAOA,EAAUN,KAAK6C,cAAcC,SAASX,EAAWU,kBAE1D,OAAQvC,EAAUyC,OAGhB,yBAAK7C,UAAU,MACb,kDACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,eAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,UAAWqC,OAP3B,8C,GAxBYZ,aCMEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.7787ef66.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ flag, name, capital }) => {\n  return (\n    <div className='bg-light-gray tc dib br3 pa3 ma2 grow bw2 shadow-5 w-30'>\n      <img src={flag} alt='flag' />\n      <div>\n        <h2>{name}</h2>\n        <p>{capital}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card.js';\n\nconst CardList = ({ countries }) => {\n  return (\n    <div>\n      {countries.map((country, i) => {\n        return (\n          <Card\n            key={i}\n            flag={countries[i].flag}\n            name={countries[i].name}\n            capital={countries[i].capital}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBar = ({ searchWord, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba bg-light-gray'\n        type='search'\n        placeholder='search countries'\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        height: '800px',\n        border: '1px solid black',\n        overflowY: 'scroll',\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops. That is not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBar from '../components/SearchBar';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      countries: [],\n      searchword: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://restcountries.eu/rest/v2/all')\n      .then((response) => response.json())\n      .then((all) => this.setState({ countries: all }));\n  }\n\n  onSearchWord = (event) => {\n    this.setState({ searchword: event.target.value });\n  };\n  render() {\n    const { countries, searchword } = this.state;\n    const filteredCountries = countries.filter((countries) => {\n      return countries.name.toLowerCase().includes(searchword.toLowerCase());\n    });\n    return !countries.length ? (\n      <h1>Loading...</h1>\n    ) : (\n      <div className='tc'>\n        <h1>Flags Of The World</h1>\n        <SearchBar searchChange={this.onSearchWord} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList countries={filteredCountries} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}